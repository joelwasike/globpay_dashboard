{"ast":null,"code":"import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = process.env.NODE_ENV === 'development' ? '' // Use proxy in development\n: 'https://merchants.globpay.ai'; // Direct URL in production\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('merchant_token');\n  if (token) {\n    // Try different ways to send the token to handle CORS\n    config.headers.Authorization = `Bearer ${token}`;\n    // Also try as a query parameter if header fails\n    if (!config.params) config.params = {};\n    config.params.token = token;\n  }\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\nexport default api;\nexport { API_BASE_URL };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","params","response","error","console","Promise","reject"],"sources":["/home/joel/projects/davy/merchants dashboard/src/config/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \n  ? '' // Use proxy in development\n  : 'https://merchants.globpay.ai'; // Direct URL in production\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: false, // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('merchant_token');\n  if (token) {\n    // Try different ways to send the token to handle CORS\n    config.headers.Authorization = `Bearer ${token}`;\n    // Also try as a query parameter if header fails\n    if (!config.params) config.params = {};\n    config.params.token = token;\n  }\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\nexport { API_BASE_URL };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GACvD,EAAE,CAAC;AAAA,EACH,8BAA8B,CAAC,CAAC;;AAEpC;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ,CAAC;EACDC,eAAe,EAAE,KAAK,CAAE;AAC1B,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;EACpD,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;IAChD;IACA,IAAI,CAACD,MAAM,CAACK,MAAM,EAAEL,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC;IACtCL,MAAM,CAACK,MAAM,CAACJ,KAAK,GAAGA,KAAK;EAC7B;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAR,GAAG,CAACK,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,GAAG;AAClB,SAASJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}