{"ast":null,"code":"import axios from'axios';// API base URL configuration\nconst API_BASE_URL=process.env.NODE_ENV==='development'?''// Use proxy in development (empty string means relative URLs)\n:'https://merchants.globpay.ai';// Direct URL in production\nconsole.log('API Configuration:',{NODE_ENV:process.env.NODE_ENV,API_BASE_URL:API_BASE_URL,fullURL:API_BASE_URL+'/api/v1/transaction/read/balance'});// Create axios instance with base URL\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json','Accept':'application/json'},withCredentials:false// Disable credentials for CORS\n});// Add token to requests if available\napi.interceptors.request.use(config=>{var _config$method;const token=localStorage.getItem('merchant_token');if(token){// In development (proxy), use Authorization header\n// In production (direct), use query parameter to avoid CORS\nif(process.env.NODE_ENV==='development'){config.headers.Authorization=`Bearer ${token}`;}else{// Use query parameter for production to avoid CORS issues\nif(!config.params)config.params={};config.params.token=token;delete config.headers.Authorization;}}// Log the actual request URL for debugging\nconsole.log('API Request:',{method:(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),url:config.url,baseURL:config.baseURL,fullURL:config.baseURL+config.url,headers:config.headers,params:config.params,environment:process.env.NODE_ENV});return config;});// Add response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{console.error('API Error:',error);return Promise.reject(error);});export default api;export{API_BASE_URL};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","console","log","fullURL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","params","method","toUpperCase","url","environment","response","error","Promise","reject"],"sources":["/home/joel/projects/davy/merchants dashboard/src/config/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \n  ? '' // Use proxy in development (empty string means relative URLs)\n  : 'https://merchants.globpay.ai'; // Direct URL in production\n\nconsole.log('API Configuration:', {\n  NODE_ENV: process.env.NODE_ENV,\n  API_BASE_URL: API_BASE_URL,\n  fullURL: API_BASE_URL + '/api/v1/transaction/read/balance'\n});\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: false, // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('merchant_token');\n  if (token) {\n    // In development (proxy), use Authorization header\n    // In production (direct), use query parameter to avoid CORS\n    if (process.env.NODE_ENV === 'development') {\n      config.headers.Authorization = `Bearer ${token}`;\n    } else {\n      // Use query parameter for production to avoid CORS issues\n      if (!config.params) config.params = {};\n      config.params.token = token;\n      delete config.headers.Authorization;\n    }\n  }\n  \n  // Log the actual request URL for debugging\n  console.log('API Request:', {\n    method: config.method?.toUpperCase(),\n    url: config.url,\n    baseURL: config.baseURL,\n    fullURL: config.baseURL + config.url,\n    headers: config.headers,\n    params: config.params,\n    environment: process.env.NODE_ENV\n  });\n  \n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\nexport { API_BASE_URL };\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CACvD,EAAG;AAAA,CACH,8BAA8B,CAAE;AAEpCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAE,CAChCF,QAAQ,CAAEF,OAAO,CAACC,GAAG,CAACC,QAAQ,CAC9BH,YAAY,CAAEA,YAAY,CAC1BM,OAAO,CAAEN,YAAY,CAAG,kCAC1B,CAAC,CAAC,CAEF;AACA,KAAM,CAAAO,GAAG,CAAGR,KAAK,CAACS,MAAM,CAAC,CACvBC,OAAO,CAAET,YAAY,CACrBU,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACZ,CAAC,CACDC,eAAe,CAAE,KAAO;AAC1B,CAAC,CAAC,CAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAK,KAAAC,cAAA,CACvC,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CACpD,GAAIF,KAAK,CAAE,CACT;AACA;AACA,GAAIhB,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAAE,CAC1CY,MAAM,CAACL,OAAO,CAACU,aAAa,CAAG,UAAUH,KAAK,EAAE,CAClD,CAAC,IAAM,CACL;AACA,GAAI,CAACF,MAAM,CAACM,MAAM,CAAEN,MAAM,CAACM,MAAM,CAAG,CAAC,CAAC,CACtCN,MAAM,CAACM,MAAM,CAACJ,KAAK,CAAGA,KAAK,CAC3B,MAAO,CAAAF,MAAM,CAACL,OAAO,CAACU,aAAa,CACrC,CACF,CAEA;AACAhB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAE,CAC1BiB,MAAM,EAAAN,cAAA,CAAED,MAAM,CAACO,MAAM,UAAAN,cAAA,iBAAbA,cAAA,CAAeO,WAAW,CAAC,CAAC,CACpCC,GAAG,CAAET,MAAM,CAACS,GAAG,CACff,OAAO,CAAEM,MAAM,CAACN,OAAO,CACvBH,OAAO,CAAES,MAAM,CAACN,OAAO,CAAGM,MAAM,CAACS,GAAG,CACpCd,OAAO,CAAEK,MAAM,CAACL,OAAO,CACvBW,MAAM,CAAEN,MAAM,CAACM,MAAM,CACrBI,WAAW,CAAExB,OAAO,CAACC,GAAG,CAACC,QAC3B,CAAC,CAAC,CAEF,MAAO,CAAAY,MAAM,CACf,CAAC,CAAC,CAEF;AACAR,GAAG,CAACK,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,EAAKA,QAAQ,CACrBC,KAAK,EAAK,CACTvB,OAAO,CAACuB,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClC,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAApB,GAAG,CAClB,OAASP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}