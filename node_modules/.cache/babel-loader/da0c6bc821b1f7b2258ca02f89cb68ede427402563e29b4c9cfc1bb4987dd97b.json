{"ast":null,"code":"import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = 'https://merchants.globpay.ai'; // Always use direct URL\n\nconsole.log('API Configuration:', {\n  NODE_ENV: process.env.NODE_ENV,\n  API_BASE_URL: API_BASE_URL,\n  fullURL: API_BASE_URL + '/api/v1/transaction/read/balance'\n});\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('merchant_token');\n  if (token) {\n    // In development (proxy), use Authorization header\n    // In production (direct), use query parameter to avoid CORS\n    if (process.env.NODE_ENV === 'development') {\n      config.headers.Authorization = `Bearer ${token}`;\n    } else {\n      // Use query parameter for production to avoid CORS issues\n      if (!config.params) config.params = {};\n      config.params.token = token;\n      delete config.headers.Authorization;\n    }\n  }\n\n  // Log the actual request URL for debugging\n  console.log('API Request:', {\n    method: (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(),\n    url: config.url,\n    baseURL: config.baseURL,\n    fullURL: config.baseURL + config.url,\n    headers: config.headers,\n    params: config.params,\n    environment: process.env.NODE_ENV\n  });\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\nexport default api;\nexport { API_BASE_URL };","map":{"version":3,"names":["axios","API_BASE_URL","console","log","NODE_ENV","process","env","fullURL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","params","method","toUpperCase","url","environment","response","error","Promise","reject"],"sources":["/home/joel/projects/davy/merchants dashboard/src/config/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = 'https://merchants.globpay.ai'; // Always use direct URL\n\nconsole.log('API Configuration:', {\n  NODE_ENV: process.env.NODE_ENV,\n  API_BASE_URL: API_BASE_URL,\n  fullURL: API_BASE_URL + '/api/v1/transaction/read/balance'\n});\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: false, // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('merchant_token');\n  if (token) {\n    // In development (proxy), use Authorization header\n    // In production (direct), use query parameter to avoid CORS\n    if (process.env.NODE_ENV === 'development') {\n      config.headers.Authorization = `Bearer ${token}`;\n    } else {\n      // Use query parameter for production to avoid CORS issues\n      if (!config.params) config.params = {};\n      config.params.token = token;\n      delete config.headers.Authorization;\n    }\n  }\n  \n  // Log the actual request URL for debugging\n  console.log('API Request:', {\n    method: config.method?.toUpperCase(),\n    url: config.url,\n    baseURL: config.baseURL,\n    fullURL: config.baseURL + config.url,\n    headers: config.headers,\n    params: config.params,\n    environment: process.env.NODE_ENV\n  });\n  \n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\nexport { API_BASE_URL };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,8BAA8B,CAAC,CAAC;;AAErDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;EAChCC,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACF,QAAQ;EAC9BH,YAAY,EAAEA,YAAY;EAC1BM,OAAO,EAAEN,YAAY,GAAG;AAC1B,CAAC,CAAC;;AAEF;AACA,MAAMO,GAAG,GAAGR,KAAK,CAACS,MAAM,CAAC;EACvBC,OAAO,EAAET,YAAY;EACrBU,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ,CAAC;EACDC,eAAe,EAAE,KAAK,CAAE;AAC1B,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;EACpD,IAAIF,KAAK,EAAE;IACT;IACA;IACA,IAAIb,OAAO,CAACC,GAAG,CAACF,QAAQ,KAAK,aAAa,EAAE;MAC1CY,MAAM,CAACL,OAAO,CAACU,aAAa,GAAG,UAAUH,KAAK,EAAE;IAClD,CAAC,MAAM;MACL;MACA,IAAI,CAACF,MAAM,CAACM,MAAM,EAAEN,MAAM,CAACM,MAAM,GAAG,CAAC,CAAC;MACtCN,MAAM,CAACM,MAAM,CAACJ,KAAK,GAAGA,KAAK;MAC3B,OAAOF,MAAM,CAACL,OAAO,CAACU,aAAa;IACrC;EACF;;EAEA;EACAnB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;IAC1BoB,MAAM,GAAAN,cAAA,GAAED,MAAM,CAACO,MAAM,cAAAN,cAAA,uBAAbA,cAAA,CAAeO,WAAW,CAAC,CAAC;IACpCC,GAAG,EAAET,MAAM,CAACS,GAAG;IACff,OAAO,EAAEM,MAAM,CAACN,OAAO;IACvBH,OAAO,EAAES,MAAM,CAACN,OAAO,GAAGM,MAAM,CAACS,GAAG;IACpCd,OAAO,EAAEK,MAAM,CAACL,OAAO;IACvBW,MAAM,EAAEN,MAAM,CAACM,MAAM;IACrBI,WAAW,EAAErB,OAAO,CAACC,GAAG,CAACF;EAC3B,CAAC,CAAC;EAEF,OAAOY,MAAM;AACf,CAAC,CAAC;;AAEF;AACAR,GAAG,CAACK,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EACT1B,OAAO,CAAC0B,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAepB,GAAG;AAClB,SAASP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}