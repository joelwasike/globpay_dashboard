{"ast":null,"code":"import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = process.env.NODE_ENV === 'development' ? '' // Use proxy in development (empty string means relative URLs)\n: 'https://merchants.globpay.ai'; // Direct URL in production\n\nconsole.log('API Configuration:', {\n  NODE_ENV: process.env.NODE_ENV,\n  API_BASE_URL: API_BASE_URL,\n  fullURL: API_BASE_URL + '/api/v1/transaction/read/balance'\n});\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('merchant_token');\n\n  // Don't add Authorization header for login endpoint\n  if (token && !config.url.includes('/api/users/login')) {\n    if (process.env.NODE_ENV === 'development') {\n      // In development (proxy), use Authorization header\n      config.headers.Authorization = `Bearer ${token}`;\n    } else {\n      // In production (direct), use query parameter to avoid CORS\n      if (!config.params) config.params = {};\n      config.params.token = token;\n      delete config.headers.Authorization;\n    }\n  }\n\n  // Log the actual request URL for debugging\n  console.log('API Request:', {\n    method: (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(),\n    url: config.url,\n    baseURL: config.baseURL,\n    fullURL: config.baseURL + config.url,\n    headers: config.headers,\n    params: config.params,\n    hasToken: !!token,\n    isLoginRequest: config.url.includes('/api/users/login'),\n    environment: process.env.NODE_ENV\n  });\n  return config;\n});\n\n// Add response interceptor for error handling and logging\napi.interceptors.response.use(response => {\n  console.log('API Response Success:', {\n    status: response.status,\n    url: response.config.url,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$config, _error$response3;\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n    message: error.message\n  });\n  return Promise.reject(error);\n});\nexport default api;\nexport { API_BASE_URL };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","console","log","fullURL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","_config$method","token","localStorage","getItem","url","includes","Authorization","params","method","toUpperCase","hasToken","isLoginRequest","environment","response","status","data","error","_error$response","_error$response2","_error$config","_error$response3","statusText","message","Promise","reject"],"sources":["/home/joel/projects/davy/merchants dashboard/src/config/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API base URL configuration\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \n  ? '' // Use proxy in development (empty string means relative URLs)\n  : 'https://merchants.globpay.ai'; // Direct URL in production\n\nconsole.log('API Configuration:', {\n  NODE_ENV: process.env.NODE_ENV,\n  API_BASE_URL: API_BASE_URL,\n  fullURL: API_BASE_URL + '/api/v1/transaction/read/balance'\n});\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: false, // Disable credentials for CORS\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('merchant_token');\n  \n  // Don't add Authorization header for login endpoint\n  if (token && !config.url.includes('/api/users/login')) {\n    if (process.env.NODE_ENV === 'development') {\n      // In development (proxy), use Authorization header\n      config.headers.Authorization = `Bearer ${token}`;\n    } else {\n      // In production (direct), use query parameter to avoid CORS\n      if (!config.params) config.params = {};\n      config.params.token = token;\n      delete config.headers.Authorization;\n    }\n  }\n  \n  // Log the actual request URL for debugging\n  console.log('API Request:', {\n    method: config.method?.toUpperCase(),\n    url: config.url,\n    baseURL: config.baseURL,\n    fullURL: config.baseURL + config.url,\n    headers: config.headers,\n    params: config.params,\n    hasToken: !!token,\n    isLoginRequest: config.url.includes('/api/users/login'),\n    environment: process.env.NODE_ENV\n  });\n  \n  return config;\n});\n\n// Add response interceptor for error handling and logging\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response Success:', {\n      status: response.status,\n      url: response.config.url,\n      data: response.data\n    });\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', {\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      url: error.config?.url,\n      data: error.response?.data,\n      message: error.message\n    });\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\nexport { API_BASE_URL };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}