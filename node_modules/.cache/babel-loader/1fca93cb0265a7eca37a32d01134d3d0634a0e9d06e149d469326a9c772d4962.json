{"ast":null,"code":"var _jsxFileName = \"/home/joel/projects/vault/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedInstitution, setSelectedInstitution] = useState('Central Bank A');\n\n  // Mock user data for demonstration\n  const mockUser = {\n    id: '1',\n    name: 'John Smith',\n    email: 'john.smith@centralbank.com',\n    role: 'Admin',\n    institution: 'Central Bank A',\n    permissions: ['read', 'write', 'admin', 'audit']\n  };\n  useEffect(() => {\n    // Check for existing token\n    const token = localStorage.getItem('vault_token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        if (decoded.exp * 1000 > Date.now()) {\n          setUser(mockUser);\n        } else {\n          localStorage.removeItem('vault_token');\n        }\n      } catch (error) {\n        localStorage.removeItem('vault_token');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // Mock login - in real app, this would call your API\n    if (email === 'admin@vault.com' && password === 'password') {\n      const token = 'mock.jwt.token';\n      localStorage.setItem('vault_token', token);\n      setUser(mockUser);\n      return {\n        success: true\n      };\n    }\n    return {\n      success: false,\n      error: 'Invalid credentials'\n    };\n  };\n  const logout = () => {\n    localStorage.removeItem('vault_token');\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    selectedInstitution,\n    setSelectedInstitution\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mHhmeMbz1AFZ4NvAkPFur/mjlUU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","selectedInstitution","setSelectedInstitution","mockUser","id","name","email","role","institution","permissions","token","localStorage","getItem","decoded","exp","Date","now","removeItem","error","login","password","setItem","success","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joel/projects/vault/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedInstitution, setSelectedInstitution] = useState('Central Bank A');\n\n  // Mock user data for demonstration\n  const mockUser = {\n    id: '1',\n    name: 'John Smith',\n    email: 'john.smith@centralbank.com',\n    role: 'Admin',\n    institution: 'Central Bank A',\n    permissions: ['read', 'write', 'admin', 'audit']\n  };\n\n  useEffect(() => {\n    // Check for existing token\n    const token = localStorage.getItem('vault_token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        if (decoded.exp * 1000 > Date.now()) {\n          setUser(mockUser);\n        } else {\n          localStorage.removeItem('vault_token');\n        }\n      } catch (error) {\n        localStorage.removeItem('vault_token');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    // Mock login - in real app, this would call your API\n    if (email === 'admin@vault.com' && password === 'password') {\n      const token = 'mock.jwt.token';\n      localStorage.setItem('vault_token', token);\n      setUser(mockUser);\n      return { success: true };\n    }\n    return { success: false, error: 'Invalid credentials' };\n  };\n\n  const logout = () => {\n    localStorage.removeItem('vault_token');\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    selectedInstitution,\n    setSelectedInstitution\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGlB,QAAQ,CAAC,gBAAgB,CAAC;;EAEhF;EACA,MAAMmB,QAAQ,GAAG;IACfC,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE,YAAY;IAClBC,KAAK,EAAE,4BAA4B;IACnCC,IAAI,EAAE,OAAO;IACbC,WAAW,EAAE,gBAAgB;IAC7BC,WAAW,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO;EACjD,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,OAAO,GAAG3B,SAAS,CAACwB,KAAK,CAAC;QAChC,IAAIG,OAAO,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACnClB,OAAO,CAACK,QAAQ,CAAC;QACnB,CAAC,MAAM;UACLQ,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;QACxC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdP,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;MACxC;IACF;IACAjB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,KAAK,GAAG,MAAAA,CAAOb,KAAK,EAAEc,QAAQ,KAAK;IACvC;IACA,IAAId,KAAK,KAAK,iBAAiB,IAAIc,QAAQ,KAAK,UAAU,EAAE;MAC1D,MAAMV,KAAK,GAAG,gBAAgB;MAC9BC,YAAY,CAACU,OAAO,CAAC,aAAa,EAAEX,KAAK,CAAC;MAC1CZ,OAAO,CAACK,QAAQ,CAAC;MACjB,OAAO;QAAEmB,OAAO,EAAE;MAAK,CAAC;IAC1B;IACA,OAAO;MAAEA,OAAO,EAAE,KAAK;MAAEJ,KAAK,EAAE;IAAsB,CAAC;EACzD,CAAC;EAED,MAAMK,MAAM,GAAGA,CAAA,KAAM;IACnBZ,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACtCnB,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAM0B,KAAK,GAAG;IACZ3B,IAAI;IACJsB,KAAK;IACLI,MAAM;IACNxB,OAAO;IACPE,mBAAmB;IACnBC;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACoC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7B,QAAA,EAChCA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjC,GAAA,CA/DWF,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}